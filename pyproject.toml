[project]
name = "modgud"
authors = [{name = "steven.miers@gmail.com"}]
description = "Expression-oriented programming for Python 3.13+ with guard clause decorators and implicit returns. Eliminate defensive coding clutter through declarative input validation and Ruby/Rust-style automatic return transformation, all while maintaining single return point architecture and zero runtime dependencies."
keywords = ["guards", "validation", "decorators", "defensive-programming", "single-return-point", "implicit-return"]
license = {text = "MIT"}
requires-python = ">=3.6"
version = "1.0.1" # Uses poetry-dynamic-versioning

[project.urls]
Homepage = "https://github.com/terracoil/modgud?tab=readme-ov-file#modgud"
Repository = "https://github.com/terracoil/modgud"
Documentation = "https://github.com/terracoil/modgud/tree/main/docs"

[tool.poetry]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Utilities",
]
include = ["LICENSE", "README.md", "modgud/py.typed"]
packages = [{include = "modgud"}]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.13.7"
# No runtime dependencies - modgud only stdlib

[dependency-groups]
test = [
    "pytest (>=8.4.2,<9.0.0)",
    "pytest-cov (>=7.0.0,<8.0.0)",
    "pytest-timeout (>=2.3.1,<3.0.0)",
    "pytest-xdist (>=3.8.0,<4.0.0)",
    "ruff (>=0.14.2,<0.15.0)"
]
dev = [
    { include-group = "test" },
    "freyja (>=1.1.0,<2.0.0)",
    "mypy[reports] (>=1.18.2,<2.0.0)",
    "pre-commit (>=4.3.0,<5.0.0)",
    "poetry-dynamic-versioning (>=1.9.1,<2.0.0)"
]

[tool.mypy]
# Cache and paths
cache_dir = "tmp/.mypy_cache"
python_version = "3.13"
exclude = [
    "build/",
    "dist/",
    "tests/test_fixtures.py",  # Exclude test fixtures from type checking
]

# Strict mode settings (equivalent to --strict)
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true

# Import discovery
ignore_missing_imports = false
follow_imports = "normal"
follow_imports_for_stubs = true
namespace_packages = true
explicit_package_bases = true

# Error presentation
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true
color_output = true
error_summary = true
show_absolute_path = false

# Incremental checking
incremental = true
cache_fine_grained = true

# Reports (generated when using --html-report etc)
linecount_report = "reports/mypy"
linecoverage_report = "reports/mypy"
lineprecision_report = "reports/mypy"
html_report = "reports/mypy/html"
txt_report = "reports/mypy/txt"
xml_report = "reports/mypy/xml"
cobertura_xml_report = "reports/mypy"

# Per-module options for test files (less strict)
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
cache_dir = "tmp/.pytest_cache"
minversion = "8.0"
addopts = "-ra -q --strict-markers --cov=modgud --cov-report=term-missing --cov-report=html:reports/coverage --cov-report=xml:reports/coverage/converage.xml"
log_file = "tmp/pytest.log" # Path to the log file
log_file_level = "DEBUG" # Minimum level for logging to file
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
style = "semver"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
